#!/usr/bin/env python
import numpy as np
from matplotlib import pyplot as plt
import pickle
from time import time
from sklearn.decomposition import PCA
import george
from george import kernels
from scipy.optimize import minimize
import argparse

desc='''
Optimize F -- optimizes 15d GP hyperparameters, minimizing chisq between reconst library and pdspy library.
'''
parser=argparse.ArgumentParser(description=desc)
parser.add_argument("--rname", help="name of the pca weights read in for training data",type=str)
parser.add_argument("--wname", help="name of the results being written out, minus filetype",type=str)
parser.add_argument("--verbose",help="print out chisq and hyperparameter vector in the likelihood function",action="store_true")
parser.add_argument("--solver",help="scipy optimize minimize solver", type=str)
args=parser.parse_args()
rname=args.rname
wname=args.wname

# load cube
with open ("./gmd/cubeflat.txt","rb") as fp:
	cubeflat=pickle.load(fp)

# load pca weight data generated by get_pca_weights.py
with open ("./gmd/"+rname+"_parvals.txt","rb") as fp:
	Xs=pickle.load(fp)
with open ("./gmd/"+rname+"_weights.txt","rb") as fp:
	ws=pickle.load(fp)
with open ("./gmd/"+rname+"_eigenseds.txt","rb") as fp:
	eigenseds=pickle.load(fp)
with open ("./gmd/"+rname+"_mean.txt","rb") as fp:
	pcamean=pickle.load(fp)
print("pca weights loaded from "+rname)

yerrs=[]
for i in range(16):
	yerrs.append([x*0.01 for x in ws[i]])
#initvecs=[]
#for i in range(16):
#    initvecs.append([ 6.33043185, 18.42068074,  0.,  0., -0.4462871 , -5.05145729, -1.38629436, 
#                     -2.4079456086518722, -2.4079456086518722,  -3.2188758248682006, -3.21887582, 
#                     -2.77258872, -2.77258872,  1.38629436,  2.19722458, 0.8109302162163288])

initvecs=[[ 1.04937962e+01,  1.69325953e+01, -1.45019411e+00, -1.31226459e+00,\
          -2.05292680e+00, -6.27366800e+00, -3.47083277e+00, -3.32102477e+00,\
          -4.02928722e+00, -4.57648325e+00, -5.72454709e+00, -4.63181143e+00,\
          -4.04861319e+00, -3.33625034e-01,  3.29387430e+00,  1.25801718e+00],\
         [ 6.36779548e+00,  1.85546774e+01, -4.77500399e-01, -1.60698231e+00,\
          -1.60501885e+00, -7.86468350e+00, -2.57379323e+00, -3.53303494e+00,\
          -2.47100061e+00, -4.54668832e+00, -6.43629921e+00, -5.24536760e+00,\
          -5.20776433e+00, -1.60581575e-02,  2.54001360e+00,  3.26220986e-01],\
         [ 5.33158201e+00,  1.84993032e+01, -7.53992608e-01, -2.20296816e+00,\
          -2.32225260e+00, -6.00524073e+00, -3.55988693e+00, -3.14547011e+00,\
          -4.36022772e+00, -4.63276046e+00, -5.04894871e+00, -4.95264986e+00,\
          -5.17486698e+00,  9.05987756e-01,  1.78047334e+00,  1.15334821e+00],\
         [ 5.33105963e+00,  1.86667006e+01, -4.33141047e-01, -1.48272294e+00,\
          -9.75507459e-01, -6.88199542e+00, -2.88454714e+00, -3.69945565e+00,\
          -4.21026498e+00, -4.45853141e+00, -3.93871668e+00, -4.32008582e+00,\
          -3.47645244e+00, -4.13255694e-01,  2.01304964e+00,  6.05077434e-01],\
         [ 7.83042960e+00,  1.76194996e+01, -1.81931123e+00, -1.66169429e-01,\
          -1.29631357e+00, -6.51321625e+00, -2.68713695e+00, -3.02287250e+00,\
          -4.54964491e+00, -4.72673039e+00, -4.38990155e+00, -3.92525828e+00,\
          -4.95913162e+00,  4.00560051e-01,  1.85176349e+00,  5.19034408e-01],\
         [ 5.33035177e+00,  1.83461274e+01, -3.36861591e-01, -9.52844845e-01,\
          -1.90646797e+00, -7.15250125e+00, -3.48246926e+00, -3.01990495e+00,\
          -4.78135878e+00, -4.69445957e+00, -3.60181524e+00, -3.81382485e+00,\
          -3.89357479e+00,  1.10753064e+00,  1.57096399e+00,  5.88877708e-01],\
         [ 5.33133925e+00,  1.84263334e+01, -8.10538649e-01, -8.75164103e-01,\
          -2.00530270e+00, -6.39264166e+00, -2.25032716e+00, -2.40540290e+00,\
          -3.32608192e+00, -4.21153403e+00, -4.01593000e+00, -3.20773415e+00,\
          -3.82607459e+00,  1.13732266e+00,  2.52944004e+00,  2.19463624e-01],\
         [ 5.02644576e+00,  1.72627173e+01, -1.44730273e+00, -1.13442135e+00,\
          -1.37611576e+00, -7.03208437e+00, -2.73649906e+00, -3.52120055e+00,\
          -3.61641654e+00, -4.60362653e+00, -5.21133321e+00, -3.62733964e+00,\
          -4.50397543e+00,  1.34526617e+00,  3.01755715e+00,  1.38649043e+00],\
         [ 4.83043839e+00,  1.85012740e+01, -1.18398822e+00, -1.25010112e+00,\
          -9.61159807e-01, -5.54820149e+00, -1.19951170e+00, -2.05857147e+00,\
          -2.78273921e+00, -3.60644000e+00, -4.95322072e+00, -3.36578981e+00,\
          -3.53785556e+00, -3.13200124e-02,  2.19092685e+00,  9.24509933e-01],\
         [ 4.83042861e+00,  1.69981887e+01, -5.86777044e-01, -1.95137879e+00,\
          -9.72180493e-01, -5.75668585e+00, -2.28820264e+00, -2.78329978e+00,\
          -2.98525176e+00, -3.88423387e+00, -4.46856032e+00, -2.84935129e+00,\
          -3.35752444e+00,  7.99961631e-01,  1.92756693e+00,  5.68456390e-01],\
         [ 4.83043842e+00,  1.84876982e+01, -1.05320745e+00, -8.67815649e-01,\
          -7.56214118e-01, -5.73915931e+00, -1.44699025e+00, -2.53630713e+00,\
          -2.16206889e+00, -3.72808462e+00, -4.55145900e+00, -2.67338714e+00,\
          -3.78320128e+00,  1.45303463e-01,  1.60186081e+00,  7.34927921e-02],\
         [ 4.83043027e+00,  1.75606624e+01, -4.73703754e-02, -5.71314005e-01,\
          -1.26901738e+00, -5.36116052e+00, -2.29402546e+00, -4.40600777e+00,\
          -2.59295894e+00, -3.82020446e+00, -3.91523322e+00, -3.59182116e+00,\
          -3.23011596e+00,  5.99487898e-01,  2.15112313e+00,  3.82865403e-01],\
         [ 5.78803401e+00,  1.71862912e+01,  1.71237424e-02,  2.00975279e-01,\
          -8.45775542e-01 ,-4.65103209e+00, -2.52290463e+00, -2.84580973e+00,\
          -4.10595240e+00, -3.67594529e+00, -3.69002451e+00, -3.61037688e+00,\
          -3.72900334e+00,  9.65038504e-01,  1.44848586e+00,  6.94079931e-01],\
         [ 4.83043838e+00,  1.77180496e+01, -1.55096265e-01, -2.03775420e-02,\
          -1.45762031e+00, -5.63795312e+00, -3.05329337e+00, -1.70982423e+00,\
          -2.14371253e+00, -3.65321678e+00, -3.78272303e+00, -3.05465825e+00,\
          -3.29596006e+00,  9.41525777e-01,  2.20216377e+00,  7.11960530e-01],\
         [ 8.83043181e+00,  1.69209736e+01, -1.93419813e-01, -2.32649981e-01,\
          -1.74521738e+00, -5.28806818e+00, -2.36266898e+00, -2.76803066e+00,\
          -2.48211832e+00, -3.47444838e+00, -3.61342649e+00, -2.89409197e+00,\
          -3.36149921e+00,  1.47672809e+00,  2.17102172e+00,  1.48326853e-01],\
         [ 6.83043892e+00,  1.87039876e+01, -1.21493113e+00, -2.84204854e+00,\
          -2.40480462e+00, -9.14382074e+00, -3.58461140e+00, -3.75703948e+00,\
          -4.39789155e+00, -4.90008716e+00, -4.36829602e+00, -4.88915994e+00,\
          -3.96420854e+00, -3.23925122e-01,  2.34333203e+00,  7.35997768e-01]]
          
##chisq=363816.97951246204, original 130603.873s

kernel = 23*kernels.ExpSquaredKernel(1**2,ndim=15,axes=0)*\
        kernels.ExpSquaredKernel(1**2,ndim=15,axes=1)*\
        kernels.ExpSquaredKernel(1**2,ndim=15,axes=2)*\
        kernels.ExpSquaredKernel(1**2,ndim=15,axes=3)*\
        kernels.ExpSquaredKernel(1**2,ndim=15,axes=4)*\
        kernels.ExpSquaredKernel(1**2,ndim=15,axes=5)*\
        kernels.ExpSquaredKernel(1**2,ndim=15,axes=6)*\
        kernels.ExpSquaredKernel(1**2,ndim=15,axes=7)*\
        kernels.ExpSquaredKernel(1**2,ndim=15,axes=8)*\
        kernels.ExpSquaredKernel(1**2,ndim=15,axes=9)*\
        kernels.ExpSquaredKernel(1**2,ndim=15,axes=10)*\
        kernels.ExpSquaredKernel(1**2,ndim=15,axes=11)*\
        kernels.ExpSquaredKernel(1**2,ndim=15,axes=12)*\
        kernels.ExpSquaredKernel(1**2,ndim=15,axes=13)*\
        kernels.ExpSquaredKernel(1**2,ndim=15,axes=14) 
blankhodlr=george.GP(kernel,solver=george.HODLRSolver)

def F_chisq_quiet(hp,gp):
    t0=time()
    #hyperparams=np.transpose(np.array(hp).reshape(16,16))
    if args.solver=="COBYLA":  # figure out why COBYLA would transpose hyperparameters
        hyperparams=np.transpose(np.array(hp).reshape(16,16))
    else:
        hyperparams=np.array(hp).reshape(16,16)
    
    print(hyperparams)
    preds=[]
    for i in range(len(ws)):  # same covfunc for each weight and the sample mean
        t1=time()
        gp.set_parameter_vector(hyperparams[i])
        if args.verbose==True:
            print("weight #"+str(i))
            print(gp.get_parameter_vector())
        gp.compute(Xs,yerrs[i])
        t2=time()
        pred, pred_var = gp.predict(ws[i], Xs, return_var=True)
        preds.append(pred)
    reconst_SEDs=[]
    for i in range(3850):
        reconst=np.dot(np.array(preds)[:,i][0:15],eigenseds[0:15]) + pcamean + np.array(preds)[:,i][15]
        reconst_SEDs.append(reconst)
    allsedsflat=np.ndarray.flatten(np.array(reconst_SEDs))
    chisq=np.sum((cubeflat-allsedsflat)**2/0.1)
    print(chisq)
    print(time()-t0)
    return chisq

def chisq(p):
    return F_chisq_quiet(p,blankhodlr)

print("starting minimize routine")
t0=time()
result = minimize(chisq,initvecs,method=args.solver)
print("minimize routine done in %0.3fs" % (time() - t0))

print("Final chisq: ")
print(np.array(result.x).reshape(16,16))
with open ("./"+wname+"_optimize_result.txt","wb") as fp:
	pickle.dump(np.array(result.x).reshape(16,16),fp)
with open ("./"+wname+"_time_rec.txt","wb") as fp:
	pickle.dump(str(time() - t0),fp)
